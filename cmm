local game = game
local Vector2new = Vector2.new
local Drawingnew = Drawing.new
local Color3fromRGB = Color3.fromRGB
local mathfloor, mathabs, mathclamp = math.floor, math.abs, math.clamp
local wait, spawn = task.wait, task.spawn
local getgenv, cloneref = getgenv, cloneref or function(v) return v end
local GameMetatable = getrawmetatable and getrawmetatable(game) or {}
local __index = GameMetatable.__index or function(self, idx) return self[idx] end
local __newindex = GameMetatable.__newindex or function(self, idx, val) self[idx] = val end
local setrenderproperty = setrenderproperty or __newindex
local Workspace = cloneref(game:GetService("Workspace"))
local Players = cloneref(game:GetService("Players"))
local RunService = cloneref(game:GetService("RunService"))
local CurrentCamera = __index(Workspace, "CurrentCamera")
local LocalPlayer = __index(Players, "LocalPlayer")
local WorldToViewportPoint = function(...) return CurrentCamera.WorldToViewportPoint(CurrentCamera, ...) end
local GetPlayers = function() return Players:GetPlayers() end
local GetPlayerFromCharacter = function(...) return Players:GetPlayerFromCharacter(...) end
local IsDescendantOf = function(self, parent) return self:IsDescendantOf(parent) end
getgenv().SimpleESP = {
    Settings = {
        Enabled = false,
        HideTeam = false,
        TeamColorEnabled = false,
        AliveCheck = true
    },
    Box = {
        Enabled = false,
        Color = Color3fromRGB(255, 255, 255),
        Transparency = 1,
        Thickness = 1,
        OutlineColor = Color3fromRGB(0, 0, 0),
        Outline = false,
        FillEnabled = false,
        FillTransparency = 0.5
    },
    HealthBar = {
        Enabled = false,
        Offset = 4,
        Blue = 100,
        Thickness = 1,
        Transparency = 1,
        OutlineColor = Color3fromRGB(0, 0, 0),
        Outline = true
    },
    Tracer = {
        Enabled = false,
        Color = Color3fromRGB(255, 255, 255),
        Thickness = 1,
        Origin = "Bottom",
        FollowMouse = false,
        Outline = true
    },
    WrappedObjects = {}
}
local Environment = getgenv().SimpleESP
local CoreFunctions = {
    GetColorFromHealth = function(health, max)
        return Color3fromRGB(255 - mathfloor(health / max * 255), mathfloor(health / max * 255), Environment.HealthBar.Blue)
    end,
    CalculateBox = function(character)
        local root = character:FindFirstChild("HumanoidRootPart") or character.PrimaryPart
        if not root then return nil, nil, false end
        local rigType = character:FindFirstChild("Torso") and "R6" or "R15"
        local cameraUpVector = CurrentCamera.CFrame.UpVector
        local rootUpVector = root.CFrame.UpVector
        local topOffset, bottomOffset
        if rigType == "R6" then
            topOffset = rootUpVector * 0.5 + cameraUpVector
            bottomOffset = rootUpVector * -4 - cameraUpVector
        else
            topOffset = rootUpVector * 1.8 + cameraUpVector
            bottomOffset = rootUpVector * -2.5 - cameraUpVector
        end
        local top = root.Position + topOffset
        local bottom = root.Position + bottomOffset
        local topScreen, topVisible = WorldToViewportPoint(top)
        local bottomScreen, bottomVisible = WorldToViewportPoint(bottom)
        if not (topVisible and bottomVisible) then return nil, nil, false end
        local width = mathfloor(math.abs(topScreen.X - bottomScreen.X))
        local height = mathfloor(math.max(math.abs(bottomScreen.Y - topScreen.Y), width / 2))
        width = math.max(width, 3)
        height = math.max(height, 3)
        local boxWidth = mathfloor(math.max(height / 1.5, width))
        local size = Vector2new(boxWidth, height)
        local position = Vector2.new(mathfloor((topScreen.X + bottomScreen.X) / 2 - boxWidth / 2), mathfloor(math.min(topScreen.Y, bottomScreen.Y)))
        return position, size, true
    end,
    GetTeamColor = function(player)
        if Environment.Settings.TeamColorEnabled and player.Team then return player.Team.TeamColor.Color end
        return Environment.Box.Color
    end
}
local function CreateVisuals(player)
    local fillBox = Drawingnew("Square")
    local boxOutline = Drawingnew("Square")
    local box = Drawingnew("Square")
    local healthOutline = Drawingnew("Line")
    local healthBar = Drawingnew("Line")
    local tracer = Drawingnew("Line")
    local tracerOutline1 = Drawingnew("Line")
    local tracerOutline2 = Drawingnew("Line")
    box.Visible = false
    boxOutline.Visible = false
    fillBox.Visible = false
    healthBar.Visible = false
    healthOutline.Visible = false
    tracer.Visible = false
    tracerOutline1.Visible = false
    tracerOutline2.Visible = false
    return {
        Box = {box, boxOutline, fillBox},
        HealthBar = {healthBar, healthOutline},
        Tracer = {tracer, tracerOutline1, tracerOutline2},
        Player = player
    }
end
local function UpdateVisuals(entry)
    local visuals = entry.Visuals
    local player = entry.Player
    local character = player.Character
    local humanoid = character and character:FindFirstChild("Humanoid")
    if Environment.Settings.HideTeam and player.Team == LocalPlayer.Team then
        for _, obj in pairs(visuals.Box) do obj.Visible = false end
        for _, obj in pairs(visuals.HealthBar) do obj.Visible = false end
        for _, obj in pairs(visuals.Tracer) do obj.Visible = false end
        return
    end
    if not character or not humanoid or (Environment.Settings.AliveCheck and humanoid.Health <= 0) then
        for _, obj in pairs(visuals.Box) do obj.Visible = false end
        for _, obj in pairs(visuals.HealthBar) do obj.Visible = false end
        for _, obj in pairs(visuals.Tracer) do obj.Visible = false end
        return
    end
    local position, size, visible = CoreFunctions.CalculateBox(character)
    local mouse = LocalPlayer:GetMouse()
    if not visible then
        for _, obj in pairs(visuals.Box) do obj.Visible = false end
        for _, obj in pairs(visuals.HealthBar) do obj.Visible = false end
        for _, obj in pairs(visuals.Tracer) do obj.Visible = false end
        return
    end
    local box, boxOutline, fillBox = unpack(visuals.Box)
    local healthBar, healthOutline = unpack(visuals.HealthBar)
    local tracer, tracerOutline1, tracerOutline2 = unpack(visuals.Tracer)
    local espEnabled = Environment.Settings.Enabled
    local boxEnabled = Environment.Box.Enabled
    local tracerEnabled = Environment.Tracer.Enabled
    box.Position = position
    box.Size = size
    box.Color = CoreFunctions.GetTeamColor(player)
    box.Transparency = Environment.Box.Transparency
    box.Filled = false
    box.Thickness = Environment.Box.Thickness
    box.Visible = espEnabled and boxEnabled and visible
    if Environment.Box.FillEnabled then
        fillBox.Position = position
        fillBox.Size = size
        fillBox.Color = CoreFunctions.GetTeamColor(player)
        fillBox.Transparency = Environment.Box.FillTransparency
        fillBox.Filled = true
        fillBox.Visible = espEnabled and boxEnabled and visible
    else
        fillBox.Visible = false
    end
    if Environment.Box.Outline then
        boxOutline.Position = position
        boxOutline.Size = size
        boxOutline.Color = Environment.Box.OutlineColor
        boxOutline.Thickness = Environment.Box.Thickness + 1
        boxOutline.Transparency = Environment.Box.Transparency
        boxOutline.Visible = espEnabled and boxEnabled and visible
    else
        boxOutline.Visible = false
    end
    if Environment.HealthBar.Enabled then
        local health = math.clamp(humanoid.Health, 0, humanoid.MaxHealth)
        local ratio = health / humanoid.MaxHealth
        local offset = Environment.HealthBar.Offset
        local barHeight = size.Y
        local barWidth = Environment.HealthBar.Thickness
        local barX = position.X - offset
        healthBar.From = Vector2new(barX, position.Y + barHeight)
        healthBar.To = Vector2new(barX, position.Y + barHeight - ratio * barHeight)
        healthBar.Color = CoreFunctions.GetColorFromHealth(health, humanoid.MaxHealth)
        healthBar.Thickness = barWidth
        healthBar.Transparency = Environment.HealthBar.Transparency
        healthBar.Visible = espEnabled and visible
        if Environment.HealthBar.Outline then
            healthOutline.From = Vector2new(barX, position.Y + barHeight + 1)
            healthOutline.To = Vector2new(barX, position.Y - 1)
            healthOutline.Color = Environment.HealthBar.OutlineColor
            healthOutline.Thickness = barWidth + 1
            healthOutline.Transparency = Environment.HealthBar.Transparency
            healthOutline.Visible = espEnabled and visible
        else
            healthOutline.Visible = false
        end
    else
        healthBar.Visible = false
        healthOutline.Visible = false
    end
    if tracerEnabled and espEnabled and visible then
        local fromPos
        if Environment.Tracer.Origin == "Center" then
            fromPos = Vector2new(CurrentCamera.ViewportSize.X / 2, CurrentCamera.ViewportSize.Y / 2)
        elseif Environment.Tracer.Origin == "Top" then
            fromPos = Vector2new(CurrentCamera.ViewportSize.X / 2, 0)
        else
            fromPos = Vector2new(CurrentCamera.ViewportSize.X / 2, CurrentCamera.ViewportSize.Y)
        end
        if Environment.Tracer.FollowMouse then
            fromPos = Vector2.new(mouse.X, mouse.Y + 36)
        end
        local toPos
        if boxEnabled and box.Visible then
            toPos = Vector2.new(position.X + size.X / 2, position.Y + size.Y)
        else
            local root = character:FindFirstChild("HumanoidRootPart") or character.PrimaryPart
            if root then
                local rootPos, rootVis = WorldToViewportPoint(root.Position)
                if rootVis then
                    toPos = Vector2.new(rootPos.X, rootPos.Y)
                end
            end
        end
        if toPos then
            tracer.From = fromPos
            tracer.To = toPos
            tracer.Color = CoreFunctions.GetTeamColor(player)
            tracer.Thickness = Environment.Tracer.Thickness
            tracer.Transparency = 1
            tracer.Visible = true
            if Environment.Tracer.Outline then
                tracerOutline1.From = fromPos
                tracerOutline1.To = Vector2.new(toPos.X - Environment.Tracer.Thickness, toPos.Y)
                tracerOutline1.Color = Color3.new(0, 0, 0)
                tracerOutline1.Thickness = Environment.Tracer.Thickness * 2
                tracerOutline1.Transparency = 1
                tracerOutline1.Visible = true
                tracerOutline2.From = fromPos
                tracerOutline2.To = Vector2.new(toPos.X + Environment.Tracer.Thickness, toPos.Y)
                tracerOutline2.Color = Color3.new(0, 0, 0)
                tracerOutline2.Thickness = Environment.Tracer.Thickness * 2
                tracerOutline2.Transparency = 1
                tracerOutline2.Visible = true
            else
                tracerOutline1.Visible = false
                tracerOutline2.Visible = false
            end
        else
            tracer.Visible = false
            tracerOutline1.Visible = false
            tracerOutline2.Visible = false
        end
    else
        tracer.Visible = false
        tracerOutline1.Visible = false
        tracerOutline2.Visible = false
    end
end
local function InitESP()
    for _, player in ipairs(GetPlayers()) do
        if player ~= LocalPlayer then
            local entry = {Visuals = CreateVisuals(player), Player = player}
            Environment.WrappedObjects[player] = entry
            local connection
            connection = RunService.RenderStepped:Connect(function()
                if not Environment.WrappedObjects[player] then
                    connection:Disconnect()
                    return
                end
                UpdateVisuals(entry)
            end)
        end
    end
    Players.PlayerAdded:Connect(function(newPlayer)
        if newPlayer == LocalPlayer then return end
        local entry = {Visuals = CreateVisuals(newPlayer), Player = newPlayer}
        Environment.WrappedObjects[newPlayer] = entry
        local connection
        connection = RunService.RenderStepped:Connect(function()
            if not Environment.WrappedObjects[newPlayer] then
                connection:Disconnect()
                return
            end
            UpdateVisuals(entry)
        end)
    end)
    Players.PlayerRemoving:Connect(function(leftPlayer)
        local entry = Environment.WrappedObjects[leftPlayer]
        if entry then
            for _, obj in pairs(entry.Visuals.Box) do obj:Remove() end
            for _, obj in pairs(entry.Visuals.HealthBar) do obj:Remove() end
            for _, obj in pairs(entry.Visuals.Tracer) do obj:Remove() end
            Environment.WrappedObjects[leftPlayer] = nil
        end
    end)
end
InitESP()
_G_ESPEnabled = function(state) Environment.Settings.Enabled = state end
_G_BoxEnabled = function(state) Environment.Box.Enabled = state end
_G_OutlineEnabled = function(state) Environment.Box.Outline = state end
_G_FillBoxEnabled = function(state) Environment.Box.FillEnabled = state end
_G_HealthBarEnabled = function(state) Environment.HealthBar.Enabled = state end
_G_TeamColorEnabled = function(state) Environment.Settings.TeamColorEnabled = state end
_G_HideTeam = function(state) Environment.Settings.HideTeam = state end
_G_SetESPColor = function(color) 
    Environment.Box.Color = color
    Environment.Tracer.Color = color
end
_G_TracerEnabled = function(state) Environment.Tracer.Enabled = state end
_G_TracerOrigin = function(option) Environment.Tracer.Origin = option end
return Environment
