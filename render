return function()
    local game = game
    local Vector2new = Vector2.new
    local Drawingnew = Drawing.new
    local Color3fromRGB = Color3.fromRGB
    local mathfloor, mathabs, mathclamp = math.floor, math.abs, math.clamp
    local getgenv, cloneref = getgenv, cloneref or function(v) return v end

    local Workspace = cloneref(game:GetService("Workspace"))
    local Players = cloneref(game:GetService("Players"))
    local RunService = cloneref(game:GetService("RunService"))

    local CurrentCamera = Workspace.CurrentCamera
    local LocalPlayer = Players.LocalPlayer
    local Mouse = LocalPlayer:GetMouse()

    local WorldToViewportPoint = function(...) return CurrentCamera.WorldToViewportPoint(CurrentCamera, ...) end
    local GetPlayers = function() return Players:GetPlayers() end

    local ESP = {
        Settings = {
            Enabled = false,
            TeamCheck = false,
            TeamColor = false
        },
        Box = {
            Enabled = false,
            Color = Color3fromRGB(255, 255, 255),
            Transparency = 1,
            Thickness = 1,
            Outline = true,
            OutlineColor = Color3fromRGB(0, 0, 0),
            FillEnabled = false,
            FillTransparency = 0.5
        },
        HealthBar = {
            Enabled = false,
            Offset = 4,
            Blue = 100,
            Thickness = 1,
            Transparency = 1,
            Outline = true,
            OutlineColor = Color3fromRGB(0, 0, 0)
        },
        Tracer = {
            Enabled = false,
            Color = Color3fromRGB(255, 255, 255),
            Thickness = 1,
            Origin = "Bottom",
            FollowMouse = false,
            Outline = true
        },
        WrappedObjects = {}
    }

    local CoreFunctions = {
        GetColorFromHealth = function(health, max)
            return Color3fromRGB(
                255 - mathfloor(health / max * 255),
                mathfloor(health / max * 255),
                ESP.HealthBar.Blue
            )
        end,
        CalculateBox = function(character)
            local root = character:FindFirstChild("HumanoidRootPart") or character.PrimaryPart
            if not root then return nil, nil, false end
            
            local rigType = character:FindFirstChild("Torso") and "R6" or "R15"
            local cameraUpVector = CurrentCamera.CFrame.UpVector
            local rootUpVector = root.CFrame.UpVector
            
            local topOffset, bottomOffset
            if rigType == "R6" then
                topOffset = rootUpVector * 0.5 + cameraUpVector
                bottomOffset = rootUpVector * -4 - cameraUpVector
            else
                topOffset = rootUpVector * 1.8 + cameraUpVector
                bottomOffset = rootUpVector * -2.5 - cameraUpVector
            end
            
            local top = root.Position + topOffset
            local bottom = root.Position + bottomOffset
            
            local topScreen, topVisible = WorldToViewportPoint(top)
            local bottomScreen, bottomVisible = WorldToViewportPoint(bottom)
            
            if not (topVisible and bottomVisible) then return nil, nil, false end
            
            local width = mathfloor(mathabs(topScreen.X - bottomScreen.X))
            local height = mathfloor(math.max(mathabs(bottomScreen.Y - topScreen.Y), width / 2))
            width = math.max(width, 3)
            height = math.max(height, 3)
            
            local boxWidth = mathfloor(math.max(height / 1.5, width))
            local size = Vector2new(boxWidth, height)
            local position = Vector2new(
                mathfloor((topScreen.X + bottomScreen.X) / 2 - boxWidth / 2),
                mathfloor(math.min(topScreen.Y, bottomScreen.Y))
            )
            
            return position, size, true
        end,
        GetESPColor = function(player, elementType)
            if ESP.Settings.TeamColor and player.Team and player.TeamColor then
                return player.TeamColor.Color
            end
            return ESP[elementType].Color
        end
    }

    local function CreateVisuals(player)
        local fillBox = Drawingnew("Square")
        local boxOutline = Drawingnew("Square")
        local box = Drawingnew("Square")
        local healthOutline = Drawingnew("Line")
        local healthBar = Drawingnew("Line")
        local tracer = Drawingnew("Line")
        local tracerOutline = Drawingnew("Line")

        local allVisuals = {box, boxOutline, fillBox, healthBar, healthOutline, tracer, tracerOutline}
        for _, v in pairs(allVisuals) do
            v.Visible = false
            v.Transparency = 1
        end
        
        tracer.ZIndex = 2
        tracerOutline.ZIndex = 1
        
        return {
            Box = {box, boxOutline, fillBox},
            HealthBar = {healthBar, healthOutline},
            Tracer = {tracer, tracerOutline},
            Player = player
        }
    end

    local function UpdateVisuals(entry)
        local visuals = entry.Visuals
        local player = entry.Player
        local character = player.Character
        local humanoid = character and character:FindFirstChild("Humanoid")
        
        local allVisuals = {unpack(visuals.Box), unpack(visuals.HealthBar), unpack(visuals.Tracer)}
        local shouldBeVisible = ESP.Settings.Enabled and character and humanoid and humanoid.Health > 0
        if ESP.Settings.TeamCheck and player.Team == LocalPlayer.Team then
            shouldBeVisible = false
        end

        if not shouldBeVisible then
            for _, obj in pairs(allVisuals) do obj.Visible = false end
            return
        end
        
        local position, size, visible = CoreFunctions.CalculateBox(character)
        
        local box, boxOutline, fillBox = unpack(visuals.Box)
        local boxVisible = shouldBeVisible and ESP.Box.Enabled and visible
        box.Visible = boxVisible
        fillBox.Visible = boxVisible and ESP.Box.FillEnabled
        boxOutline.Visible = boxVisible and ESP.Box.Outline

        if boxVisible then
            local espColor = CoreFunctions.GetESPColor(player, "Box")
            box.Position = position
            box.Size = size
            box.Color = espColor
            box.Transparency = ESP.Box.Transparency
            box.Filled = false
            box.Thickness = ESP.Box.Thickness
            
            if ESP.Box.FillEnabled then
                fillBox.Position = position
                fillBox.Size = size
                fillBox.Color = espColor
                fillBox.Transparency = ESP.Box.FillTransparency
                fillBox.Filled = true
            end

            if ESP.Box.Outline then
                boxOutline.Position = position
                boxOutline.Size = size
                boxOutline.Color = ESP.Box.OutlineColor
                boxOutline.Thickness = ESP.Box.Thickness + 1
                boxOutline.Transparency = ESP.Box.Transparency
            end
        end
        
        local healthBar, healthOutline = unpack(visuals.HealthBar)
        local healthBarVisible = shouldBeVisible and ESP.HealthBar.Enabled and visible
        healthBar.Visible = healthBarVisible
        healthOutline.Visible = healthBarVisible and ESP.HealthBar.Outline

        if healthBarVisible then
            local health = mathclamp(humanoid.Health, 0, humanoid.MaxHealth)
            local ratio = health / humanoid.MaxHealth
            local offset = ESP.HealthBar.Offset
            local barHeight = size.Y
            local barWidth = ESP.HealthBar.Thickness
            local barX = position.X - offset
            
            healthBar.From = Vector2new(barX, position.Y + barHeight)
            healthBar.To = Vector2new(barX, position.Y + barHeight - ratio * barHeight)
            healthBar.Color = CoreFunctions.GetColorFromHealth(health, humanoid.MaxHealth)
            healthBar.Thickness = barWidth
            healthBar.Transparency = ESP.HealthBar.Transparency
            
            if ESP.HealthBar.Outline then
                healthOutline.From = Vector2new(barX, position.Y + barHeight + 1)
                healthOutline.To = Vector2new(barX, position.Y - 1)
                healthOutline.Color = ESP.HealthBar.OutlineColor
                healthOutline.Thickness = barWidth + 1
                healthOutline.Transparency = ESP.HealthBar.Transparency
            end
        end

        local tracer, tracerOutline = unpack(visuals.Tracer)
        local rootPart = character and character:FindFirstChild("HumanoidRootPart")
        local tracerVisible = shouldBeVisible and ESP.Tracer.Enabled and rootPart
        tracer.Visible = tracerVisible
        tracerOutline.Visible = tracerVisible and ESP.Tracer.Outline

        if tracerVisible then
            local rootPos, onScreen = WorldToViewportPoint(rootPart.Position)
            if not onScreen then
                tracer.Visible = false
                tracerOutline.Visible = false
                return
            end

            local fromPos
            if ESP.Tracer.FollowMouse then
                fromPos = Vector2new(Mouse.X, Mouse.Y + 36)
            else
                if ESP.Tracer.Origin == "Bottom" then
                    fromPos = Vector2new(CurrentCamera.ViewportSize.X / 2, CurrentCamera.ViewportSize.Y)
                elseif ESP.Tracer.Origin == "Top" then
                    fromPos = Vector2new(CurrentCamera.ViewportSize.X / 2, 0)
                else
                    fromPos = Vector2new(CurrentCamera.ViewportSize.X / 2, CurrentCamera.ViewportSize.Y / 2)
                end
            end
            
            local toPos = Vector2new(rootPos.X, rootPos.Y)
            local espColor = CoreFunctions.GetESPColor(player, "Tracer")

            tracer.Color = espColor
            tracer.Thickness = ESP.Tracer.Thickness
            tracer.From = fromPos
            tracer.To = toPos

            if ESP.Tracer.Outline then
                tracerOutline.Color = ESP.Box.OutlineColor
                tracerOutline.Thickness = ESP.Tracer.Thickness + 1
                tracerOutline.From = fromPos
                tracerOutline.To = toPos
            end
        end
    end

    local function InitPlayer(player)
        if player == LocalPlayer then return end
        
        local entry = {
            Visuals = CreateVisuals(player),
            Player = player
        }
        ESP.WrappedObjects[player] = entry
        
        local connection
        connection = RunService.RenderStepped:Connect(function()
            if not ESP.WrappedObjects[player] then
                connection:Disconnect()
                return
            end
            pcall(UpdateVisuals, entry)
        end)
    end

    for _, player in ipairs(GetPlayers()) do
        InitPlayer(player)
    end
    
    Players.PlayerAdded:Connect(InitPlayer)
    
    Players.PlayerRemoving:Connect(function(leftPlayer)
        local entry = ESP.WrappedObjects[leftPlayer]
        if entry then
            local allVisuals = {unpack(entry.Visuals.Box), unpack(entry.Visuals.HealthBar), unpack(entry.Visuals.Tracer)}
            for _, obj in pairs(allVisuals) do
                obj:Remove()
            end
            ESP.WrappedObjects[leftPlayer] = nil
        end
    end)

    return ESP
end
