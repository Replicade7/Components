--[[
    Unified ESP Script
    Manages 2D Box, HealthBar, and Tracers
]]

--// Services & Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local CurrentCamera = Workspace.CurrentCamera
local WorldToViewportPoint = function(...) return CurrentCamera:WorldToViewportPoint(...) end

--// Create the global table for settings and control
_G.ESP = {
    Settings = {
        Enabled = true,
        TeamCheck = false,
        UseTeamColor = false
    },
    Box = {
        Enabled = true,
        Color = Color3.fromRGB(255, 255, 255),
        Transparency = 1,
        Thickness = 1,
        Outline = true,
        OutlineColor = Color3.fromRGB(0, 0, 0),
        FillEnabled = false,
        FillTransparency = 0.5
    },
    HealthBar = {
        Enabled = true,
        Thickness = 2,
        Transparency = 1,
        Outline = true,
        OutlineColor = Color3.fromRGB(0, 0, 0),
        Offset = 4
    },
    Tracer = {
        Enabled = true,
        Color = Color3.fromRGB(255, 255, 255),
        Thickness = 1,
        Transparency = 1,
        Origin = "Bottom", -- Options: "Bottom", "Top", "Center"
        Outline = true,
        OutlineColor = Color3.fromRGB(0, 0, 0)
    },
    WrappedObjects = {}
}

local ESP = _G.ESP

--// Core utility functions
local CoreFunctions = {
    GetTeamColor = function(player)
        if ESP.Settings.UseTeamColor and player.TeamColor then
            return player.TeamColor.Color
        end
        return ESP.Tracer.Color -- Default color
    end,
    GetHealthColor = function(health, maxHealth)
        local ratio = math.clamp(health / maxHealth, 0, 1)
        return Color3.fromHSV(ratio * 0.33, 1, 1) -- Green to Red
    end
}

--// Creates all necessary Drawing objects for a player
local function CreateVisuals(player)
    local box = Drawing.new("Square")
    local boxOutline = Drawing.new("Square")
    local boxFill = Drawing.new("Square")
    local healthBar = Drawing.new("Line")
    local healthBarOutline = Drawing.new("Line")
    local tracer = Drawing.new("Line")
    local tracerOutline = Drawing.new("Line")

    box.Visible, boxOutline.Visible, boxFill.Visible = false, false, false
    healthBar.Visible, healthBarOutline.Visible = false, false
    tracer.Visible, tracerOutline.Visible = false, false

    return {
        Player = player,
        Box = {box, boxOutline, boxFill},
        HealthBar = {healthBar, healthBarOutline},
        Tracer = {tracer, tracerOutline}
    }
end

--// Updates all visuals for a single player each frame
local function UpdateVisuals(entry)
    local player = entry.Player
    if not player or not player.Character or not player.Character:FindFirstChild("Humanoid") or player.Character.Humanoid.Health <= 0 then
        for category, objects in pairs(entry) do
            if category ~= "Player" then
                for _, obj in pairs(objects) do obj.Visible = false end
            end
        end
        return
    end

    local character = player.Character
    local humanoid = character.Humanoid
    local rootPart = character:FindFirstChild("HumanoidRootPart") or character.PrimaryPart
    if not rootPart then return end

    local headPosition, onScreen = WorldToViewportPoint(rootPart.Position + Vector3.new(0, 2, 0))
    local footPosition, onScreen2 = WorldToViewportPoint(rootPart.Position - Vector3.new(0, 3, 0))

    if not (onScreen and onScreen2) or not ESP.Settings.Enabled or (ESP.Settings.TeamCheck and player.Team == LocalPlayer.Team) then
        for category, objects in pairs(entry) do
            if category ~= "Player" then
                for _, obj in pairs(objects) do obj.Visible = false end
            end
        end
        return
    end

    local boxHeight = math.abs(headPosition.Y - footPosition.Y)
    local boxWidth = boxHeight / 2
    local boxPosition = Vector2.new(headPosition.X - boxWidth / 2, headPosition.Y)
    local boxSize = Vector2.new(boxWidth, boxHeight)

    -- Update 2D Box
    local box, boxOutline, boxFill = unpack(entry.Box)
    box.Visible = ESP.Box.Enabled
    if ESP.Box.Enabled then
        box.Position = boxPosition
        box.Size = boxSize
        box.Color = CoreFunctions.GetTeamColor(player)
        box.Thickness = ESP.Box.Thickness
        box.Transparency = ESP.Box.Transparency
        box.Filled = false

        boxOutline.Visible = ESP.Box.Outline
        if ESP.Box.Outline then
            boxOutline.Position = boxPosition - Vector2.new(1, 1)
            boxOutline.Size = boxSize + Vector2.new(2, 2)
            boxOutline.Color = ESP.Box.OutlineColor
            boxOutline.Thickness = ESP.Box.Thickness
            boxOutline.Transparency = ESP.Box.Transparency
            boxOutline.Filled = false
        end
        
        boxFill.Visible = ESP.Box.FillEnabled
        if ESP.Box.FillEnabled then
            boxFill.Position = boxPosition
            boxFill.Size = boxSize
            boxFill.Color = CoreFunctions.GetTeamColor(player)
            boxFill.Transparency = ESP.Box.FillTransparency
            boxFill.Filled = true
        end
    end

    -- Update HealthBar
    local healthBar, healthBarOutline = unpack(entry.HealthBar)
    healthBar.Visible = ESP.HealthBar.Enabled
    healthBarOutline.Visible = ESP.HealthBar.Enabled and ESP.HealthBar.Outline
    if ESP.HealthBar.Enabled then
        local healthRatio = math.clamp(humanoid.Health, 0, humanoid.MaxHealth) / humanoid.MaxHealth
        local barStart = Vector2.new(boxPosition.X - ESP.HealthBar.Offset, boxPosition.Y + boxSize.Y)
        local barEnd = Vector2.new(boxPosition.X - ESP.HealthBar.Offset, barStart.Y - (boxSize.Y * healthRatio))
        
        healthBar.From, healthBar.To = barStart, barEnd
        healthBar.Color = CoreFunctions.GetHealthColor(humanoid.Health, humanoid.MaxHealth)
        healthBar.Thickness = ESP.HealthBar.Thickness
        healthBar.Transparency = ESP.HealthBar.Transparency
        
        if ESP.HealthBar.Outline then
            local outlineThickness = ESP.HealthBar.Thickness + 2
            healthBarOutline.From = Vector2.new(barStart.X, barStart.Y + 1)
            healthBarOutline.To = Vector2.new(barEnd.X, barEnd.Y - 1)
            healthBarOutline.Color = ESP.HealthBar.OutlineColor
            healthBarOutline.Thickness = outlineThickness
            healthBarOutline.Transparency = ESP.HealthBar.Transparency
        end
    end

    -- Update Tracer
    local tracer, tracerOutline = unpack(entry.Tracer)
    tracer.Visible = ESP.Tracer.Enabled
    tracerOutline.Visible = ESP.Tracer.Enabled and ESP.Tracer.Outline
    if ESP.Tracer.Enabled then
        local fromPos
        if ESP.Tracer.Origin == "Top" then
            fromPos = Vector2.new(CurrentCamera.ViewportSize.X / 2, 0)
        elseif ESP.Tracer.Origin == "Center" then
            fromPos = Vector2.new(CurrentCamera.ViewportSize.X / 2, CurrentCamera.ViewportSize.Y / 2)
        else -- Bottom
            fromPos = Vector2.new(CurrentCamera.ViewportSize.X / 2, CurrentCamera.ViewportSize.Y)
        end
        local toPos = Vector2.new(footPosition.X, footPosition.Y)

        tracer.From, tracer.To = fromPos, toPos
        tracer.Color = CoreFunctions.GetTeamColor(player)
        tracer.Thickness = ESP.Tracer.Thickness
        tracer.Transparency = ESP.Tracer.Transparency

        if ESP.Tracer.Outline then
            tracerOutline.From, tracerOutline.To = fromPos, toPos
            tracerOutline.Color = ESP.Tracer.OutlineColor
            tracerOutline.Thickness = ESP.Tracer.Thickness + 2
            tracerOutline.Transparency = ESP.Tracer.Transparency
        end
    end
end

--// Main initialization and event handling
local function Initialize()
    -- Initial players
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            ESP.WrappedObjects[player] = CreateVisuals(player)
        end
    end

    -- Handle players joining
    Players.PlayerAdded:Connect(function(player)
        if player ~= LocalPlayer then
            ESP.WrappedObjects[player] = CreateVisuals(player)
        end
    end)

    -- Handle players leaving
    Players.PlayerRemoving:Connect(function(player)
        if ESP.WrappedObjects[player] then
            for category, objects in pairs(ESP.WrappedObjects[player]) do
                if category ~= "Player" then
                    for _, obj in pairs(objects) do obj:Remove() end
                end
            end
            ESP.WrappedObjects[player] = nil
        end
    end)

    -- Main update loop
    RunService.RenderStepped:Connect(function()
        for player, entry in pairs(ESP.WrappedObjects) do
            pcall(UpdateVisuals, entry)
        end
    end)
end

Initialize()
return ESP
